loadLibrary("termUtilities");

// Die Prozedur eval(f, I) wertet die aussagen-logische Formel f unter
// der aussagen-logischen Interpretation I aus.
evaluate := procedure(f, I) {
    match (f) {
        case true:              return true;
        case false:             return false;
        case p | isVariable(p): return I[varName(p)];
        case !g:                return !evaluate(g, I);
        case g && h:            return  evaluate(g, I) && evaluate(h, I);
        case g || h:            return  evaluate(g, I) || evaluate(h, I);
        case g => h:            return  evaluate(g, I) => evaluate(h, I);
        case g <==> h:          return  evaluate(g, I) == evaluate(h, I);
        default:                abort("syntax error in evaluate($f$, $I$)");
    }
};

// This procedure turns a subset m of the set of all variables
// into a propositional valuation i, such that i(x) is true
// iff x is an element of m.
createValuation := procedure(m, v) {
    return { [ x, x in m ] : x in v };
};

// Wenn Herr Meier kommt, bringt er auch Frau Meier mit.
f1 := parse("HM => FM");
// Mindestens eines der beiden Kinder Walter und Katrin wird kommen.
f2 := parse("KW || KK");
// Entweder kommt Frau Meier oder Franziska, aber nicht beide.
f3 := parse("(FM || F) && (F => !FM) && (FM => !F)");
// Entweder kommen Fransizka und Katrin zusammen oder beide kommen nicht.
f4 := parse("(F && KK) || (!F && !KK)");
// Wenn Walter kommt, dann kommen auch Katrin und Herr Meier.
f5 := parse("KW => KK && HM");

fs := {f1, f2, f3, f4, f5};

V := {"HM", "FM", "KW", "KK", "F"};
All := 2**V;

B := { createValuation(M, V) : M in All };
S := { I : I in B | forall (f in fs | evaluate(f, I)) };

print("Set of all valuations satisfying all facts: ", S);
if (#S == 1) {
    I := arb(S);
    visitors := { x : x in V | I[x] };
    print("Set of visitors: ", visitors);
}