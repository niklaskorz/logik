// load("graph-2-dot.stlx");
// Drei Missionare und drei Kannibalen wollen zusammen einen Fluß
// überqueren. Das Boot hat nur Platz für zwei Passagiere.  Die Kannibalen
// sind hungrig, wenn die Missionare an einem Ufer in der Unterzahl sind,
// haben sie ein Problem.  Die Aufgabe besteht darin, einen Fahrplan zu
// erstellen, so dass hinterher alle am anderen Ufer ankommen und die
// Missionare nicht gefressen werden.

//////////////////////////////////////////////////////////////////////////
//                                                                      //
// Die folgenden Prozeduren dienen nur dem Ausdrucken der Lösung und    //
// zum Debuggen.
//                                                                      //
//////////////////////////////////////////////////////////////////////////

// Dieses Prädikat druckt die Lösung aus.
printPath := procedure(path) {
    print("Solution:\n");
    for (i in [1 .. #path - 1]) {
        [ m1, k1, b1 ] := path[i];
        [ m2, k2, b2 ] := path[i+1];
        printState(m1, k1, b1);
        printBoat(m1, k1, b1, m2, k2, b2);
    }
    [ m, k, b ] := path[#path];
    printState(m, k, b);
};


// Die Prozedur printState(m, k, b) druckt den Zustand, bei dem
// m Missionare, k Kannibalen und b Boote am linken Ufer sind.
printState := procedure(m, k, b) {
     print( fillCharsRight(m * "M", 6) +
            fillCharsRight(k * "K", 6) +
            fillCharsRight(b * "B", 3) + "    |~~~~~|    " +
            fillCharsLeft((3 - m) * "M", 6) +
            fillCharsLeft((3 - k) * "K", 6) +
            fillCharsLeft((1 - b) * "B", 3)
          );
};

// Die Prozedur printBoat(m1, k1, b1, m2, k2, b2) druckt den Zustand des
// Bootes, wenn der Zustand sich von [m1, k1, b1] zu [m2, k2, b2] �ndert.
printBoat := procedure(m1, k1, b1, m2, k2, b2) {
    if (b1 == 1) {
        if (m1 < m2) {
            print("Fehler in printBoat: negative Anzahl von Missionaren im Boot!");
            return;
        }
        if (k1 < k2) {
            print("Fehler in printBoat: negative Anzahl von Kannibalen im Boot!");
            return;
        }
        print( 19 * " " + "> " + fillCharsBoth( (m1 - m2) * "M" + " " + (k1 - k2) * "K", 3 ) + " >" );
    } else {
        if (m1 > m2) {
            print("Fehler in printBoat: negative Anzahl von Missionaren im Boot!");
            return;
        }
        if (k1 > k2) {
            print("Fehler in printBoat: negative Anzahl von Kannibalen im Boot!");
            return;
        }
        print( 19 * " " + "< " + fillCharsBoth( (m2 - m1) * "M" + " " + (k2 - k1) * "K", 3 ) + " <" );
    }
};

// Die Prozedur fillCharsLeft(x, n) wandelt x in einen String der L�nge n um.
// Dabei wird der String von links mit Leerzeichen aufgef�llt.
fillCharsLeft := procedure(x, n) {
    s := x + "";
    m := n - #s;
    return m * " " + s;
};

// Die Prozedur fillCharsRight(x, n) wandelt x in einen String der L�nge n um.
// Dabei wird der String von rechts mit Leerzeichen aufgef�llt.
fillCharsRight := procedure(x, n) {
    s := x + "";
    m := n - #s;
    return s + m * " ";
};

// Die Prozedur fillCharsBoth(x, n) wandelt x in einen String der L�nge n um.
// Dabei wird der String von links und rechts mit Leerzeichen aufgef�llt.
fillCharsBoth := procedure(x, n) {
    s  := x + "";
    ml := (n     - #s) \ 2;
    mr := (n + 1 - #s) \ 2;
    return ml * " " + s + mr * " ";
};

//////////////////////////////////////////////////////////////////////////
//                                                                      //
// Die unten aufgef�hrten Prozeduren sind 1-zu-1 aus dem Programm zur   //
// L�sung des Wolf-Ziege-Kohl-Problems kopiert.                         //
//                                                                      //
//////////////////////////////////////////////////////////////////////////

// Check wether there is a path from x to y in R and compute it.
findPath := procedure(x, y, r) {
    p := { [x] };
    while (true) {
        oldP  := p;
        p     := p + pathProduct(p, r);
        found := { l : l in p | l[#l] == y };
        if (found != {}) {
            return arb(found);
        }
        if (p == oldP) {
            return;
        }
    }
};

// The procedure call product(p, q) computes the path product p * q.
pathProduct := procedure(p, q) {
    return { add(x,y) : x in p, y in q | x[#x] == y[1] && !cyclic(add(x,y)) };
};

// The procedure not_cyclic(p) checks whether the path p is cyclic.
cyclic := procedure(p) {
    return #{ x : x in p } < #p;
};

// The product call add(p,q) computes the sum of the lists p and q.
// The last point of p has to be the first point of q.
add := procedure(p, q) {
    return p + q[2..];
};

//////////////////////////////////////////////////////////////////////////
//                                                                      //
// Ab hier beginnt der Code zur L�sung des Problems.                    //
//                                                                      //
//////////////////////////////////////////////////////////////////////////

// Es gibt ein Problem, wenn es an einem Ufer weniger Missionare als 
// Kannbialen sind, es sei denn, dass an dem Ufer �berhaupt keine 
// Missionare sind.
problem := procedure(m, k) {
    return m < k && m != 0;
};
// Die einzelnen Punkte werden durch Tripel beschrieben.  Das Tripel
// [ m, k, b ] gibt an, dass m Missionare, k Kannibalen und b Boote am
// linken Ufer sind. Die Zahl der Missionare am rechten Ufer ist damit
// automatisch 3 - m, die Zahl der Kannibalen am rechten Ufer ist 3 - k
// und die Zahl der Boote am rechten Ufer ist 1 - b.
// P beschreibt alle möglichen Zustände, in denen es kein Problem gibt.
P := {
    [m, k, b] : m in { 0 .. 3 }, k in { 0 .. 3 }, b in { 0, 1 } |
    !problem(m, k) && !problem(3 - m, 3 - k)
};

// R1 beschreibt Zustandsübergänge, bei denen das Boot vom linken Ufer
// zum rechten Ufer fährt. pm ist die Anzahl der Missionare, die im Boot
// übersetzen und pk ist die Anzahl der Kannibalen im Boot.
R1 := {
    [ [m1, k1, b1], [m2, k2, b2] ] : [m1, k1, b1] in P, [m2, k2, b2] in P |
    b1 == 1 && b2 == 0 && // Zuerst Boot auf linker Seite, danach nicht mehr
    (m1 + k1) - (m2 + k2) <= 2 && // Maximal zwei Personen im Boot
    (m1 + k1) - (m2 + k2) >= 1 && // Mindestens eine Person im Boot
    m1 - m2 >= 0 && k1 - k2 >= 0 // Keine negative Anzahl von Missionaren oder Kannibalen im Boot
};
         // Das Boot darf nicht leer sein und fasst maximal 2 Passagiere
         // Der neu Zustand muss eine erlaubter Zustand sein.
// r2 beschreibt Zustandsübergänge, bei denen das Boot vom rechten Ufer
// zum linken Ufer führt. Die Relation r2 ist die zu r1 inverse Relation.

R2 := { [p2, p1] : [p1, p2] in R1 }; // R2 ist das Inverse zu R1

// R ist die Menge aller Verbindungen zwischen Punkten.
R := R1 + R2; // Vereinigung von R1 und R2
// Am Anfang sind alle links.
start := [3, 3, 1];
// Am Ende sollen alle rechts sein, links ist dann niemand mehr.
goal  := [0, 0, 0];

// Berechne alle möglichen Pfade.
Path  := findPath(start, goal, R);
// und geben diesen Schritt für Schritt aus.
if (Path != om) {
    print("Anzahl der Ueberfahrten: $#Path - 1$");
    printPath(Path);
} else {
    print("No solution found!");
}

// graph := { [[[m1,k1,b1], [3-m1,3-k1,1-b1]], [[m2,k2,b2],[3-m2,3-k2,1-b2]]] : [[m1,k1,b1], [m2,k2,b2]] in R1 };
// graph2Dot(graph, [start, goal], [goal, start], "missionare");

