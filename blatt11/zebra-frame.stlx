loadLibrary("termUtilities");
load("knf.stlx");
load("davis-putnam.stlx");

// Parse a propositional formula and transform the result into a conjunctive
// normal form in set notation.
parseKNF := procedure(f) {
    return normalize(parseTerm(f));
};

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// The problem specific code starts here.                                     //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

// Given a set s of propositional variables, the call atMostOne(s) creates
// a set of clauses.  This set expresses the fact that at most one of
// the variables in s is true.
atMostOne := procedure(S) {
    return { { !p, !q } : p in S, q in S | p != q };
};

// Given a function symbol f and an index i, this procedure generates the 
// propositional variable f(i).  For example, the expression
//
//   propVar("German", 2)
// 
// generates the propositional variable German(i).
propVar := procedure(f, i) {
    return makeTerm(f, [i]);
};

// We use the following propositional variables:
//
// Briton(i):  The Briton lives in house number i, where i is an element of the
//             set {1..5}.  The other nationalities are coded using the
//             propositional variables
//                      German(i), Swede(i), American(i), and Norwegian(i).
// Red(i):     The house with number i is red.
//             similarly: Green(i), White(i), Blue(i), Yellow(i).
// Dunhill(i): The inhabitant of house number i smokes Dunhill.
//             similarly: Camel(i), Marlboro(i), Winfield(i), Rothmanns(i).
// Dog(i):     The dog lives in house number i.
//             similarly: Parrot(i), Cat(i), Pig(i), Zebra(i).
// Whiskey(i): The inhabitant of house number i drinks Whiskey.
//             similarly: Coffee(i), Beer(i), Milk(i), Water(i).

// If the function onePerHouse is called as 
//      onePerHouse({"German", "Briton", "Swede", "American", "Norwegian"});    
// then it will generate clauses stating that
//      1.  There is a house where the German lives.
//      2.  There is a house where the Briton lives.
//          ...
//      3.  The Briton and the Swede do not live in the same house and
//          similarly for all other pairs of nationalities.
//      4.  Someone lives in the 1. house.
//      5.  Someone lives in the 2. house.
//          ...
//
// Notice that this problem is related to the 8 queens problem. 
onePerHouse := procedure(m) {
    // make use of the functions somewhere, someone, and atMostOneAt
    // that are defined below.
    return "Your code here.";
};
// If this function is called as 
//       somewhere("Briton")
// it will generate a clause stating that the Briton lives in one ofthe five houses.
somewhere := procedure(x) {
    // Your code here.
};
// This procedure generates a clause that expresses that some variable from the set m 
// is true for the index i.  For example, the call
//
//    someone({ "German", "Briton", "Swede", "Norwegian", "American" }, 2)
// 
// generates a clause expressing that somebody lives in the house with  number 2.
someone := procedure(m, i) {
    // Your code here.
};
// The argument m is a set of function symbols. For example,
//
//   m = { "German", "Briton", "Swede", "Norwegian", "American" }.
//
// The argument i is an integer in the set {1..5}.  This variable represents
// the number of a house.  Continuing the example, atMostOneAt(m, i) generates 
// a set of clauses that is true iff at most one of the propositional variables
//
//    German(i), Briton(i), Swede(i), Norwegian(i), American(i)
//
// is true.
atMostOneAt := procedure(m, i) {
    // your code here
};
// This procedure can be called as sameHouse("Briton", "Red") to express
// the fact that the Briton lives in the red house.
sameHouse := procedure(a, b) {
    result := {};
    for (i in [1..5]) {
        result += parseKNF("$propVar(a, i)$ <==> $propVar(b, i)$");
    }
    return result;
};
// nextTo(a, b) is true if a is next to b.  This procedure might be called as
// nextTo("Marlboro", "Cat") to generate a set of clauses that express the fact
// that the person smoking Marlboro lives next to the person who owns a cat.
nextTo := procedure(a, b) {
    result := {};
    result := parseKNF("$propVar(a,1)$ => $propVar(b,2)$");
    for (i in [2 .. 4]) {
        result += parseKNF("$propVar(a,i)$ => $propVar(b,i-1)$ || $propVar(b,i+1)$");
    }
    result += parseKNF("$propVar(a,5)$ => $propVar(b,4)$");
    return result;
};
// leftTo(a, b) is true if a is immediately left to b.  This procedure might be called as
// nextTo("Marlboro", "Cat") to generate a set of clauses that express the fact
// that the person smoking Marlboro lives left to the person who owns a cat. 
leftTo := procedure(a, b) {
    result := {};
    for (i in [1 .. 4]) {
        result += parseKNF("$propVar(a,i)$ => $propVar(b,i+1)$");
    }
    result += parseKNF("!$propVar(a,5)$");
    return result;
};

allClauses := procedure() {
    clauses := {};
    // Every house has exactly one inhabitant.  This inhabitant has exactly one
    // nationality, one pet, smokes one brand of cigarettes, and has one type
    // of drink.  Furthermore, every house has exactly one color.
    clauses += onePerHouse({"German", "Briton", "Swede", "American", "Norwegian"});    
    // more clauses here ...


    
    // The Briton lives in the red house. 

    // The Swede has a dog.

    // The American drinks whiskey.

    // The inhabitant of the green house drinks coffee.

    // The person who owns a parrot smokes Camel.

    // The person in the yellow house smokes Dunhill.

    // The person smoking Winfield drinks beer.

    // The German smokes Rothmanns.

    // The green house is left to the white house.

    // The inhabitant of the third house drinks milk.

    // The Norwegian lives in the first house. 

    // The person smoking Marlboro lives next to the person who owns a cat.

    // The person with the pig lives next to the Dunhill smoker.

    // The Norwegian lives next to the blue house.

    // The Marlboro smoker lives next to the house where water is drunken.

    return clauses;
};

solve := procedure() {
    clauses  := allClauses();
    solution := davisPutnam(clauses, {});
    printSolution(solution);
    print("checking uniqueness ...");
    for (i in {1 .. 5}) {
        solution := davisPutnam(clauses + { { propVar("Zebra", i) } }, {});
        if (solution == {{}}) {
            print("The zebra cannot be in house number " + i + ".");
        } else {
            print("The zebra might be in house number " + i + ".");
        }
    }
};

printSolution := procedure(solution) {
    for (clause in solution) {
        match (arb(clause)) {
            case !p: // skip
            case  p: print(p);
        }
    }
};

solve();
