// clauses ist eine Menge von Klauseln und literals ist eine Menge
// von Literalen.  Der Aufruf DavisPutnam(clauses, literals) versucht 
// eine Lösung der Menge
//                        clauses
// zu berechnen.  Wenn dies gelingt, wird eine Menge von Unit-Klauseln 
// zurück gegeben, die keine komplementären Literale enthält.  Aus dieser 
// Menge kann dann unmittelbar eine Belegung berechnet werden, die clauses
// löst.
//       Wenn die Menge clauses unlösbar ist, wird { {} } zurück gegeben.
// Das Argument literals dient der Buchhaltung bei den rekursiven Aufrufen.
// Hier werden alle die Literale aufgesammelt, mit denen die Menge clauses
// schon reduziert wurde.  Beim ersten Aufruf ist diese Menge leer.
davisPutnam := procedure(Clauses, Literals) {
    Clauses := saturate(Clauses);
    if ({} in Clauses) {
        return { {} };    // unsolvable
    }
    if (forall (C in Clauses | #C == 1)) {
        return Clauses;   // solution found
    }
    l := selectLiteral(Clauses, Literals);
    notL := negateLiteral(l);    
    S := davisPutnam(Clauses + { {l} }, Literals + { l });
    if (S != { {} }) {
        return S;  // solution found
    }     
    return davisPutnam(Clauses + { {notL} }, Literals + { notL });
};
// Gegeben ist eine Menge S von Klauseln.  Der Aufruf saturate(S) berechnet alle
// Klauseln, die mit Unit Schnitten aus S ableitbar sind.  Zusätzlich werden alle
// Klauseln, die von Unit-Klauseln subsumiert werden, aus der Menge S entfernt.
saturate := procedure(S) {
    Units := { C : C in S | #C == 1 };
    Used  := {};
    while (Units != {}) {
        Unit  := arb(Units);
        Used  += { Unit };
        l     := arb(Unit);
        S     := reduce(S, l);
        Units := { C : C in S | #C == 1 && !(C in Used) };        
    }
    return S;
};
// Die Prozedur reduce(s,l) führt alle Unit-Schnitte und alle Unit-Subsumptionen,
// die mit der Unit-Klausel {l} möglich sind, durch.  S ist eine Menge von Klauseln,
// l ist ein Literal.
reduce := procedure(S, l) {
    notL := negateLiteral(l);
    return   { C - { notL } : C in S | notL in C } 
           + { C : C in S | !(notL in C) && !(l in C) } 
           + { {l} };
};
// Wir wählen ein beliebiges Literal aus einer beliebigen Klausel,
// so dass weder dieses Literal noch die Negation benutzt wurden.
selectLiteral := procedure(S, Used) {
    return rnd({} +/ S - Used);  // used rnd instead of arb for efficiency
};
// Diese Prozedur berechnet das Komplement des Literals l.
negateLiteral := procedure(l) {
    match (l) {
        case !p : return p;
        case  p : return !p;
    }
};

m := parse("{ {r,p,s}, {r,s}, {q,p,s}, {!p,!q}, {!p,s,!r}, {p,!q,r}, {!r,!s,q}, {p,q,r,s}, {r,!s,q}, {!r,s,!q}, {s,!r} }");
print(davisPutnam(m,{}));
