// This procedure evaluates the formula f in the structure s
// using the variable assignment i.
evalFormula := procedure(f, S, I) {
    U := S[1];
    match (f) {
        case true     : return true;
        case false    : return false;
        case !g       : return !evalFormula(g, S, I);
        case g && h   : return  evalFormula(g, S, I) && evalFormula(h, S, I);
        case g || h   : return  evalFormula(g, S, I) || evalFormula(h, S, I);
        case g => h   : return  evalFormula(g, S, I) => evalFormula(h, S, I);
        case g <==> h : return  evalFormula(g, S, I) == evalFormula(h, S, I);
        case @Forall(x, g) : 
             return forall (c in U | evalFormula(g, S, modify(I, x, c)));
        case @Exists(x, g) : 
             return exists (c in U | evalFormula(g, S, modify(I, x, c)));
        default : return evalAtomic(f, S, I);  // atomic formula
    }
};
// This procedure evaluates the atomic formula a in the structure s
// using the variable assignment i.
evalAtomic := procedure(a, S, I) {
    // we do not support nullary predicates 
    J  := S[2];
    p  := fct(a); // predicate symbol
    pJ := J[p];
    argList := args(a);
    argsVal := evalTermList(argList, S, I);
    return argsVal in pJ;
};  
// This procedure evaluates the term t in the structure s
// using the variable assignment i.
evalTerm := procedure(t, S, I) {
    if (fct(t) == "@@@variable") {
        varName := args(t)[1];
        return I[varName];
    }
    J    := S[2];
    f    := fct(t); // function symbol
    fJ   := J[f];
    argList := args(t);
    argsVal := evalTermList(argList, S, I);
    if (#argsVal > 0) {        
        return fJ[argsVal]; 
    } else {
        return fJ;   // t is a constant
    }
};
// This procedure evaluates the term list tl, given the structure s and the variable
// assignment i.
evalTermList := procedure(tl, S, I) {
    return [ evalTerm(t, S, I) : t in tl ];
};
// Given a variable assignment i, a variable x, and an element c from the universe,
// this function computes the variable assignement i[x/c] which satisfies
//     i[x/c](x) == c,
//     i[x/c](y) == i(y) for x != y.
modify := procedure(I, v, c) {
    x := args(v)[1];
    I[x] := c;
    return I;
};

//////

// Formel fÃ¼r Aufgabe 2
n := 3;
U := { "x$i$" : i in { 1 .. n } };
print(U);
equals := { [ x, x ] : x in U };
J := { [ "p", equals ] };
S := [ U, J ];
AllI := { { ["x", x], ["y", y] } : x in U, y in U };
f := parse("@Forall(x, @Exists(y, @p(x, y))) => @Exists(y, @Forall(x, @p(x, y)))");
print("Checking A2");
isTrue := false;
for (I in AllI) {
    print("Checking for: ", I);
    if (evalFormula(f, S, I)) {
        isTrue := true;
        print("True for: ", I);
    }
}
print("isTrue: ", isTrue);
I := { [x, x] : x in U };
print("isTrue: ", evalFormula(f, S, I));
