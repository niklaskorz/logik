// This procedure evaluates the formula f in the structure s
// using the variable assignment i.
evalFormula := procedure(f, S, I) {
    U := S[1];
    match (f) {
        case true     : return true;
        case false    : return false;
        case !g       : return !evalFormula(g, S, I);
        case g && h   : return  evalFormula(g, S, I) && evalFormula(h, S, I);
        case g || h   : return  evalFormula(g, S, I) || evalFormula(h, S, I);
        case g => h   : return  evalFormula(g, S, I) => evalFormula(h, S, I);
        case g <==> h : return  evalFormula(g, S, I) == evalFormula(h, S, I);
        case @Forall(x, g) : 
             return forall (c in U | evalFormula(g, S, modify(I, x, c)));
        case @Exists(x, g) : 
             return exists (c in U | evalFormula(g, S, modify(I, x, c)));
        default : return evalAtomic(f, S, I);  // atomic formula
    }
};
// This procedure evaluates the atomic formula a in the structure s
// using the variable assignment i.
evalAtomic := procedure(a, S, I) {
    // we do not support nullary predicates 
    J  := S[2];
    p  := fct(a); // predicate symbol
    pJ := J[p];
    argList := args(a);
    argsVal := evalTermList(argList, S, I);
    return argsVal in pJ;
};  
// This procedure evaluates the term t in the structure s
// using the variable assignment i.
evalTerm := procedure(t, S, I) {
    if (fct(t) == "@@@variable") {
        varName := args(t)[1];
        return I[varName];
    }
    J    := S[2];
    f    := fct(t); // function symbol
    fJ   := J[f];
    argList := args(t);
    argsVal := evalTermList(argList, S, I);
    if (#argsVal > 0) {        
        return fJ[argsVal]; 
    } else {
        return fJ;   // t is a constant
    }
};
// This procedure evaluates the term list tl, given the structure s and the variable
// assignment i.
evalTermList := procedure(tl, S, I) {
    return [ evalTerm(t, S, I) : t in tl ];
};
// Given a variable assignment i, a variable x, and an element c from the universe,
// this function computes the variable assignement i[x/c] which satisfies
//     i[x/c](x) == c,
//     i[x/c](y) == i(y) for x != y.
modify := procedure(I, v, c) {
    x := args(v)[1];
    I[x] := c;
    return I;
};
////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// Below are some examples of structures and formula.                         //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

// A simple commutative group with two elements a and b.
// The following definitions of the variables a and b are just a convenience.
a := "a";
b := "b";
U := { a, b };  // the universe
// product is the interpretation of the function symbol "*".
product := { [ [ a, a ], a ],  [ [ a, b ], b ],  [ [ b, a ], b ],  [ [ b, b ], a ] };
// equals is the interpretation of the predicate symbol "==".
equals := { [ x, x ] : x in U };
// The structure consists of the universe and the interpretation of
// the function and predicate symbols.
J := { [ "E", a ], [ "@@@product", product ], [ "@@@equals", equals ] };
S := [ U, J ];
// i is a variable assignment.
I := { [ "x", a ], [ "y", b ], [ "z", a ] };

// Formel fÃ¼r Aufgabe 2
F := parse("@Forall(x, @Exists(y, p(x, y))) => @Exists(y, @Forall(x, p(x, y)))")


// The following formulas are the axioms of commutative group theory.
g1 := parse("@Forall(x, x * @E() == x)");
g2 := parse("@Forall(x, @Exists(y, x * y == @E()))");
g3 := parse("@Forall(x, @Forall(y, @Forall(z, (x*y)*z == x*(y*z) )))");
g4 := parse("@Forall(x, @Forall(y, x * y == y * x))");
GT := { g1, g2, g3, g4 };

print("\nchecking group theory in the structure \n", S);
for (f in GT) {
    print( "checking $f$: $evalFormula(f, S, I)$" );
}

// A non-commutative group with 6 elements a0, a1, a2, a3, a4, a5. 
a0 := "a0";
a1 := "a1";
a2 := "a2";
a3 := "a3";
a4 := "a4";
a5 := "a5";
U  := { a0, a1, a2, a3, a4, a5 };  // the universe
// product is the interpretation of the function symbol "*".
product := { 
 [[a0, a0], a0], [[a0, a1], a1], [[a0, a2], a2], [[a0, a3], a3], [[a0, a4], a4], [[a0, a5], a5],
 [[a1, a0], a1], [[a1, a1], a2], [[a1, a2], a0], [[a1, a3], a5], [[a1, a4], a3], [[a1, a5], a4],
 [[a2, a0], a2], [[a2, a1], a0], [[a2, a2], a1], [[a2, a3], a4], [[a2, a4], a5], [[a2, a5], a3],
 [[a3, a0], a3], [[a3, a1], a4], [[a3, a2], a5], [[a3, a3], a0], [[a3, a4], a1], [[a3, a5], a2],
 [[a4, a0], a4], [[a4, a1], a5], [[a4, a2], a3], [[a4, a3], a2], [[a4, a4], a0], [[a4, a5], a1],
 [[a5, a0], a5], [[a5, a1], a3], [[a5, a2], a4], [[a5, a3], a1], [[a5, a4], a2], [[a5, a5], a0]
};
// equals is the interpretation of the predicate symbol "==".
equals := { [ x, x ] : x in U };
// The structure consists of the universe and the interpretation of
// the function and predicate symbols.
S := [ U, { [ "E", a0 ], [ "@@@product", product ], [ "@@@equals", equals ] } ];
// I is a variable assignment.
I := { [ "x", a0 ], [ "y", a1 ], [ "z", a2 ] }; 

print("\nchecking group theory in the structure \n", S);
for (f in GT) {
    print( "checking ", f, ": ", evalFormula(f, S, I) );
}

